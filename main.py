"""
PyAlgoViz - A Python Algorithm Visualizer
Copyright (c) 2024 laffra - All Rights Reserved.
"""

from polyscript import XWorker # type: ignore   pylint: disable=import-error
import ltk
from editor import Editor


ALGORITHM = """
from random import sample

def bubbleSort(L):
    for i in range(len(L)-1, 0, -1): 
        for j in range(i):
            if L[j]>L[j+1]:
                L[j],L[j+1] = L[j+1],L[j]
            
data = sample(range(10), 10)
bubbleSort(data)
""".strip()

VISUALIZATION = """
barchart(50, 60, 460, 150, data, highlight=i, scale=4)
""".strip()

editor_algo = Editor(ALGORITHM)
editor_viz = Editor(VISUALIZATION)
auto_run = ltk.Switch("auto-run", True)

@ltk.callback
def run(_event=None):
    """ Run the current algorithm """
    ltk.publish(
        "Main",
        "Worker",
        "run",
        [editor_algo.get(), editor_viz.get()]
    )

@ltk.callback
def changed(_event=None):
    """ Run the current algorithm """
    if auto_run.checked():
        run()

editor_algo.on("change", changed)


class State(ltk.Model):
    """ The state for the algorithm visualization """
    speed_human = 2
    speed_delay = 0.01
    step = 0
    steps = []

    def changed(self, name, value):
        if name == "speed_human":
            self.speed_delay = [0.2, 0.05, 0.01][self.speed_human]
            state.step = 0
            show()


state = State()


def show():
    """ Show the current algorithm """
    if state.step >= len(state.steps.value):
        return
    step = state.steps[state.step]
    state.step += 1
    ltk.find(".visualization").html(str(step[0]) + "\n" + "\n".join(step[1]))
    ltk.schedule(show, f"show step {state.step}", state.speed_delay)


def visualize(data):
    """ Visualize the current algorithm """
    print("Show", state.speed_delay)
    state.steps = data
    state.step = 0
    show()


def show_error(error):
    """ Show any errors generated by the current algorithm """
    ltk.find(".log-algo").html(error)


ltk.subscribe("Main", "visualize", visualize)
ltk.subscribe("Main", "error", show_error)
ltk.subscribe("Main", "ready", run)

ltk.find("body").append(
    ltk.HorizontalSplitPane(
        ltk.VerticalSplitPane(
            ltk.VBox(
                editor_algo,
                ltk.HBox(
                    ltk.Button("run", run),
                    auto_run,
                    ltk.Select(["Slow", "Medium", "Fast"], state.speed_human)
                        .addClass("speed"),
                    ltk.Button("prev", ltk.proxy(lambda _event: None)),
                    ltk.Button("play", ltk.proxy(lambda _event: None)),
                    ltk.Button("next", ltk.proxy(lambda _event: None)),
                    ltk.Button("save", ltk.proxy(lambda _event: None)),
                    ltk.Slider(30, 0, 100)
                         .addClass("progress"),
                ).addClass("controls"),
            ),
            editor_viz,
            "editors",
        ).addClass("column"),
        ltk.VerticalSplitPane(
            ltk.Preformatted(
                "Loading..."
            ).addClass("visualization"),
            ltk.Tabs(
                ltk.Div()
                .addClass("log-algo")
                .attr("name", "Algorithm Log"),
                ltk.Div()
                .addClass("log-viz")
                .attr("name", "Visualization Log"),
            ).addClass("log"),
            "result",
        ).addClass("column"),
        "main",
    )
    .addClass("main")
)

config = {
    "interpreter": "pyodide/pyodide.js",
    "packages": [ 
    ],
    "files": {
        "lsp.py": "lsp.py",
        "https://raw.githubusercontent.com/pyscript/ltk/main/ltk/jquery.py": "ltk/jquery.py",
        "https://raw.githubusercontent.com/pyscript/ltk/main/ltk/widgets.py": "ltk/widgets.py",
        "https://raw.githubusercontent.com/pyscript/ltk/main/ltk/pubsub.py": "ltk/pubsub.py",
        "https://raw.githubusercontent.com/pyscript/ltk/main/ltk/__init__.py": "ltk/__init__.py",
        "https://raw.githubusercontent.com/pyscript/ltk/main/ltk/logger.py": "ltk/logger.py",
        "https://raw.githubusercontent.com/pyscript/ltk/main/ltk/ltk.js": "ltk/ltk.js",
        "https://raw.githubusercontent.com/pyscript/ltk/main/ltk/ltk.css": "ltk/ltk.css",
    }
}
worker = XWorker("worker.py", config=ltk.to_js(config), type="pyodide")
ltk.register_worker("pyodide-worker", worker)
