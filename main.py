"""
PyAlgoViz - A Python Algorithm Visualizer
Copyright (c) 2024 laffra - All Rights Reserved.
"""

# pylint: disable=invalid-name
# pylint: disable=global-statement
# pylint: disable=exec-used
# pylint: disable=broad-except
# pylint: disable=unused-argument
# pylint: disable=too-many-arguments
# pylint: disable=too-many-positional-arguments

import asyncio
from polyscript import XWorker # type: ignore   pylint: disable=import-error
import ltk
import editor
import worker_files

ALGORITHM = "# Your algorithm goes here."
CLICK_LOAD = "# Your algorithm goes here.\n\n# Click Load... for an existing example."
VISUALIZATION = "# Your visualization logic goes here."

class State(ltk.Model):
    """ The state for the algorithm visualization """
    speed_human: int = 1
    speed_delay: float = 0.01
    step: int = 0
    steps = []
    step_count = 0
    auto_run = True
    choices = []

    def changed(self, name, value):
        if name == "speed_human":
            delay = [0.1, 0.01, 0][self.speed_human]
            self.speed_delay = delay
            if state.auto_run:
                show(0)
        elif name == "step":
            if value is not None:
                render_current()
        elif name == "auto_run":
            if value:
                show(0)


state = State()
editor_algo = editor.Editor(ALGORITHM)
editor_viz = editor.Editor(VISUALIZATION)
auto_run = ltk.Switch("auto-run", state.auto_run)
progress = ltk.Slider(state.step, 0, 0)

progress.on("slide", ltk.proxy(lambda *args: progress.trigger("change")))

@ltk.callback
def run(_event=None):
    """ Run the current algorithm """
    ltk.publish(
        "Main",
        "Worker",
        "run",
        [editor_algo.get(), editor_viz.get()]
    )
    ltk.window.clear()
    ltk.window.text(15, 125, "Running...", 20, "Arial", "green")

@ltk.callback
def changed(_event=None):
    """ Run the current algorithm """
    if auto_run.checked():
        run()

editor_algo.on("change", changed)
editor_viz.on("change", changed)


def render_current():
    """ Render the current step """
    if state.step >= state.step_count.value:
        return
    step = state.steps[state.step]
    lineno, viz = step
    ltk.window.clear()
    try:
        ltk.window.render(viz)
    except Exception as e:
        print("JS Render error", e)
        ltk.window.text(25, 25, f"Internal JS render error: {e}", 15, "Arial", "red")
        for n, line in enumerate(viz.split("\n")):
            if "range" in line:
                ltk.window.text(25, 35 + n*16, f"{n}: {line}", 15, "Arial", "black")
    editor_algo.mark_line(lineno - 1)


def show(step=-1):
    """ Show the current algorithm """
    if step >= 0:
        state.step = step
    if state.speed_delay == 0:
        state.step += 10
    render_current()
    state.step += 1
    if state.step < state.step_count.value:
        ltk.schedule(show, f"show step {state.step}", state.speed_delay)
    else:
        next_step()


def visualize(data):
    """ Visualize the current algorithm """
    state.steps = data
    state.step_count = len(data)
    progress.element.slider("option", "max", str(state.step_count))
    ltk.window.init()
    ltk.window.text(15, 125, "Loading...", 20, "Arial", "green")
    ltk.schedule(lambda: show(0), "show step 0", 0)


def show_error(data):
    """ Show any errors generated by the current algorithm """
    lineno, error = data
    ltk.find(".log-algo").append(
        ltk.Div(f"Error at line {lineno}: {error}")
            .addClass("error")
    )
    editor_algo.mark_line(lineno - 1)


def previous_step(_event=None):
    """ Show the previous step """
    state.step = max(0, state.step - 1)


def next_step(_event=None):
    """ Show the next step """
    state.step = min(len(state.steps.value) - 1, state.step + 1)


def load(_event=None):
    """ Load an existing algorithm """

    @ltk.callback
    def load_algo(event):
        button = ltk.find(event.target)
        ltk.window.location = f"?name={button.text()}"

    ltk.Div([
        ltk.Button(name, load_algo).addClass("choice-button")
        for name in sorted(state.choices)
    ]).attr("title", "Load...").dialog(ltk.to_js({
        "width": 800,
    }))


def load_source(sources):
    """ Load the algorithm and visualization """
    name, author, algo, viz = sources
    editor_algo.set(algo)
    editor_viz.set(viz)
    ltk.find(".log-algo").append(
        ltk.Heading1(name.replace("_", " ")).element,
        ltk.Text(f"Author: {author}").element,
    )
    run()


def save_choices(choices):
    """ Save the algorithms the user can choose from """
    state.choices = choices
    ltk.find("#load-button").attr("disabled", False)
    if "name=" not in ltk.window.location.href:
        editor_algo.set(CLICK_LOAD)


def setup_ui():
    """ Create the UI """
    ltk.find("body").append(
        ltk.HorizontalSplitPane(
            ltk.VerticalSplitPane(
                ltk.VBox(
                    editor_algo,
                    ltk.HBox(
                        ltk.Button("run", run),
                        auto_run,
                        ltk.Select(["Slow", "Medium", "Fast"], state.speed_human)
                            .addClass("speed"),
                        ltk.Button("Prev", previous_step),
                        ltk.Label("Step:"),
                        ltk.Label(state.step).addClass("step-label"),
                        progress.addClass("progress"),
                        ltk.Button("Next", next_step),
                        ltk.Button("Load...", load)
                            .attr("id", "load-button")
                            .attr("disabled", True),
                    ).addClass("controls"),
                ).addClass("top-left"),
                editor_viz,
                "editors",
            ).addClass("column"),
            ltk.VerticalSplitPane(
                ltk.Div()
                    .addClass("drawing"),
                ltk.Tabs(
                    ltk.Div()
                        .addClass("log-algo")
                        .attr("name", "Algorithm Log"),
                    ltk.Div()
                        .addClass("log-viz")
                        .attr("name", "Visualization Log"),
                ).addClass("log"),
                "result",
            ).addClass("column"),
            "main",
        )
        .addClass("main")
    )


def worker_ready(request):
    """ Worker is ready """
    ltk.publish(
        "Main",
        "Worker",
        "load",
        ltk.get_url_parameter("name")
    )


def setup_worker():
    """ Setup the worker """
    ltk.subscribe("Main", "visualize", visualize)
    ltk.subscribe("Main", "error", show_error)
    ltk.subscribe("Main", "ready", worker_ready)
    ltk.subscribe("Main", "source", load_source)
    ltk.subscribe("Main", "choices", save_choices)
    files = worker_files.files
    files["primitives.py"] = "primitives.py"
    config = {
        "interpreter": "pyodide/pyodide.js",
        "packages": [ 
        ],
        "files": files,
    }
    worker = XWorker("worker.py", config=ltk.to_js(config), type="pyodide")
    ltk.register_worker("pyodide-worker", worker)


def show_loading():
    """ Show the loading screen """
    if "name=" in ltk.window.location.href:
        editor_algo.set("Loading...")
        editor_viz.set("Loading...")


def setup():
    """ Setup the application """
    setup_ui()
    setup_worker()
    show_loading()
    ltk.window.init()


setup()
