"""
PyAlgoViz - A Python Algorithm Visualizer
Copyright (c) 2024 laffra - All Rights Reserved.
"""

# pylint: disable=invalid-name
# pylint: disable=global-statement
# pylint: disable=exec-used
# pylint: disable=broad-except
# pylint: disable=unused-argument
# pylint: disable=too-many-arguments
# pylint: disable=too-many-positional-arguments

from polyscript import XWorker # type: ignore   pylint: disable=import-error
import ltk
from editor import Editor


ALGORITHM = """
from random import sample

def bubbleSort(L):
    for i in range(len(L)-1, 0, -1): 
        for j in range(i):
            if L[j]>L[j+1]:
                L[j],L[j+1] = L[j+1],L[j]
            
data = sample(range(30), 30)
bubbleSort(data)
""".strip()

VISUALIZATION = """
barchart(50, 60, 460, 150, data, highlight=i, scale=4)
text(50, 35, "Bubble Sort", 15, color="green")
""".strip()


class State(ltk.Model):
    """ The state for the algorithm visualization """
    speed_human: int = 2
    speed_delay: float = 0.0
    step: int = 0
    steps = []
    step_count = 0
    auto_run = True

    def changed(self, name, value):
        if name == "speed_human":
            delay = [0.1, 0.01, 0][self.speed_human]
            self.speed_delay = delay
            if state.auto_run:
                show(0)
        elif name == "step":
            render_current()
        elif name == "auto_run":
            if value:
                show(0)


state = State()
editor_algo = Editor(ALGORITHM)
editor_viz = Editor(VISUALIZATION)
auto_run = ltk.Switch("auto-run", state.auto_run)
progress = ltk.Slider(state.step, 0, 0)

progress.on("slide", ltk.proxy(lambda *args: progress.trigger("change")))

@ltk.callback
def run(_event=None):
    """ Run the current algorithm """
    ltk.publish(
        "Main",
        "Worker",
        "run",
        [editor_algo.get(), editor_viz.get()]
    )
    ltk.window.clear()
    ltk.window.text(25, 25, "Running...", color="green")

@ltk.callback
def changed(_event=None):
    """ Run the current algorithm """
    if auto_run.checked():
        run()

editor_algo.on("change", changed)
editor_viz.on("change", changed)


def render_current():
    """ Render the current step """
    if state.step >= state.step_count.value:
        return
    step = state.steps[state.step]
    lineno, viz = step
    ltk.window.clear()
    try:
        ltk.window.render(viz)
    except Exception as e:
        print("error", e)
        ltk.window.text(10, 10, str(e), color="red")
    editor_algo.mark_line(lineno - 1)


def show(step=-1):
    """ Show the current algorithm """
    if step >= 0:
        state.step = step
    if state.speed_delay == 0:
        state.step += int(state.step_count/100)
    render_current()
    state.step += 1
    if state.step < state.step_count.value:
        ltk.schedule(show, f"show step {state.step}", state.speed_delay)
    else:
        next_step()


def visualize(data):
    """ Visualize the current algorithm """
    state.steps = data
    state.step_count = len(data)
    progress.element.slider("option", "max", str(state.step_count))
    ltk.window.init()
    ltk.window.text(25, 25, "Loading...", 12, "Arial", "blue")
    ltk.schedule(lambda: show(0), "show step 0", 1)


def show_error(error):
    """ Show any errors generated by the current algorithm """
    ltk.find(".log-algo").html(error)


def previous_step(_event=None):
    """ Show the previous step """
    state.step = max(0, state.step - 1)


def next_step(_event=None):
    """ Show the next step """
    state.step = min(len(state.steps.value) - 1, state.step + 1)


ltk.subscribe("Main", "visualize", visualize)
ltk.subscribe("Main", "error", show_error)
ltk.subscribe("Main", "ready", run)

ltk.find("body").append(
    ltk.HorizontalSplitPane(
        ltk.VerticalSplitPane(
            ltk.VBox(
                editor_algo,
                ltk.HBox(
                    ltk.Button("run", run),
                    auto_run,
                    ltk.Select(["Slow", "Medium", "Fast"], state.speed_human)
                        .addClass("speed"),
                    ltk.Button("prev", previous_step),
                    ltk.Label("Step:"),
                    ltk.Label(state.step).addClass("step-label"),
                    progress.addClass("progress"),
                    ltk.Button("next", next_step),
                ).addClass("controls"),
            ),
            editor_viz,
            "editors",
        ).addClass("column"),
        ltk.VerticalSplitPane(
            ltk.Div()
                .addClass("drawing"),
            ltk.Tabs(
                ltk.Div()
                .addClass("log-algo")
                .attr("name", "Algorithm Log"),
                ltk.Div()
                .addClass("log-viz")
                .attr("name", "Visualization Log"),
            ).addClass("log"),
            "result",
        ).addClass("column"),
        "main",
    )
    .addClass("main")
)

ltk.window.init()
config = {
    "interpreter": "pyodide/pyodide.js",
    "packages": [ 
    ],
    "files": {
    }
}
worker = XWorker("worker.py", config=ltk.to_js(config), type="pyodide")
ltk.register_worker("pyodide-worker", worker)
